import { type ShoppingListItem } from '../../types';

/**
 * 買い物リスト管理用Repositoryインターフェース
 * 
 * 買い物リストデータのCRUD操作とチェック状態管理機能を提供します。
 * テスト時のモック化とSupabase実装の抽象化を目的としています。
 */
export interface IShoppingListRepository {
  /**
   * 指定ユーザーの全買い物リストアイテムを取得
   * @param userId ユーザーID
   * @returns 買い物リストアイテム配列
   */
  findAll(userId: string): Promise<ShoppingListItem[]>;

  /**
   * IDで買い物リストアイテムを取得
   * @param id 買い物リストアイテムID
   * @returns 買い物リストアイテム（存在しない場合はnull）
   */
  findById(id: string): Promise<ShoppingListItem | null>;

  /**
   * 新しい買い物リストアイテムを作成
   * @param item 作成する買い物リストアイテム（IDと日時は自動生成）
   * @returns 作成された買い物リストアイテム
   */
  create(item: Omit<ShoppingListItem, 'id' | 'created_at'>): Promise<ShoppingListItem>;

  /**
   * 買い物リストアイテムを更新
   * @param id 更新対象のID
   * @param updates 更新データ（部分更新可能）
   * @returns 更新後の買い物リストアイテム
   */
  update(id: string, updates: Partial<ShoppingListItem>): Promise<ShoppingListItem>;

  /**
   * 買い物リストアイテムを削除
   * @param id 削除対象のID
   */
  delete(id: string): Promise<void>;

  /**
   * アイテムのチェック状態を切り替え
   * @param id 対象アイテムのID
   * @param checked チェック状態
   * @returns 更新後の買い物リストアイテム
   */
  toggleCheck(id: string, checked: boolean): Promise<ShoppingListItem>;

  /**
   * チェック状態別の買い物リストアイテムを取得
   * @param userId ユーザーID
   * @param checked チェック状態（true: 完了済み、false: 未完了）
   * @returns 該当する買い物リストアイテム配列
   */
  findByChecked(userId: string, checked: boolean): Promise<ShoppingListItem[]>;

  /**
   * 追加方法別の買い物リストアイテムを取得
   * @param userId ユーザーID
   * @param addedFrom 追加方法（manual: 手動、auto: 自動）
   * @returns 該当する買い物リストアイテム配列
   */
  findByAddedFrom(userId: string, addedFrom: 'manual' | 'auto'): Promise<ShoppingListItem[]>;

  /**
   * 食材名で買い物リストアイテムを検索（部分一致）
   * @param userId ユーザーID
   * @param name 検索する食材名
   * @returns 該当する買い物リストアイテム配列
   */
  findByName(userId: string, name: string): Promise<ShoppingListItem[]>;

  /**
   * 完了済みアイテムを一括削除
   * @param userId ユーザーID
   * @returns 削除されたアイテム数
   */
  deleteCompleted(userId: string): Promise<number>;

  /**
   * 自動生成アイテムを一括削除
   * @param userId ユーザーID
   * @returns 削除されたアイテム数
   */
  deleteAutoGenerated(userId: string): Promise<number>;

  /**
   * 複数アイテムを一括作成
   * @param items 作成する買い物リストアイテム配列
   * @returns 作成された買い物リストアイテム配列
   */
  createMany(items: Omit<ShoppingListItem, 'id' | 'created_at'>[]): Promise<ShoppingListItem[]>;
}