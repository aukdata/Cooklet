import React, { useState, useEffect } from 'react';
import { BaseDialog } from '../ui/BaseDialog';
import { QuantityInput } from '../common/QuantityInput';
import { type ShoppingListItem } from '../../types';

// У▓исЂёуЅЕсЃфсѓ╣сЃѕсѓбсѓцсЃєсЃасЃђсѓцсѓбсЃГсѓ░сЂ«PropsтъІт«џуЙЕ
interface ShoppingItemDialogProps {
  isOpen: boolean;
  onClose: () => void;
  onSave: (item: Omit<ShoppingListItem, 'id' | 'userId' | 'createdAt'>) => Promise<void>;
  onDelete?: () => void; // сѓбсѓцсЃєсЃасѓњтЅіжЎцсЂЎсѓІжќбТЋ░№╝ѕуиежЏєТЎѓсЂ«сЂ┐№╝Ѕ
  initialData?: ShoppingListItem;
}

// У▓исЂёуЅЕсЃфсѓ╣сЃѕсѓбсѓцсЃєсЃауиежЏєсЃђсѓцсѓбсЃГсѓ░сѓ│сЃ│сЃЮсЃ╝сЃЇсЃ│сЃѕ - CLAUDE.mdС╗ЋТДўТЏИ5.6.4Т║ќТІа
export const ShoppingItemDialog: React.FC<ShoppingItemDialogProps> = ({
  isOpen,
  onClose,
  onSave,
  onDelete,
  initialData
}) => {
  // сЃЋсѓЕсЃ╝сЃауіХТЁІу«Ауљє
  const [name, setName] = useState('');
  const [quantity, setQuantity] = useState('');
  const [isLoading, setIsLoading] = useState(false);

  // уиежЏєсЃбсЃ╝сЃЅсЂІсЂЕсЂєсЂІсЂ«тѕцт«џ
  const isEditing = !!initialData;

  // тѕЮТюЪсЃЄсЃ╝сѓ┐сѓњсЃЋсѓЕсЃ╝сЃасЂФтЈЇТўа
  useEffect(() => {
    if (initialData) {
      setName(initialData.name || '');
      setQuantity(initialData.quantity || '');
    } else {
      setName('');
      setQuantity('');
    }
  }, [initialData, isOpen]);

  // сЃЋсѓЕсЃ╝сЃасЃфсѓ╗сЃЃсЃѕ
  const resetForm = () => {
    setName('');
    setQuantity('');
  };

  // С┐ЮтГўтЄдуљє
  const handleSave = async () => {
    if (!name.trim()) return;

    setIsLoading(true);
    try {
      await onSave({
        name: name.trim(),
        quantity: quantity.trim() || undefined,
        checked: initialData?.checked || false,
        addedFrom: initialData?.addedFrom || 'manual'
      });
      resetForm();
      onClose();
    } catch (error) {
      console.error('У▓исЂёуЅЕсЃфсѓ╣сЃѕсѓбсѓцсЃєсЃасЂ«С┐ЮтГўсЂФтц▒ТЋЌсЂЌсЂЙсЂЌсЂЪ:', error);
    } finally {
      setIsLoading(false);
    }
  };

  // тЅіжЎцтЄдуљє
  const handleDelete = async () => {
    if (!onDelete) return;

    setIsLoading(true);
    try {
      await onDelete();
      onClose();
    } catch (error) {
      console.error('У▓исЂёуЅЕсЃфсѓ╣сЃѕсѓбсѓцсЃєсЃасЂ«тЅіжЎцсЂФтц▒ТЋЌсЂЌсЂЙсЂЌсЂЪ:', error);
    } finally {
      setIsLoading(false);
    }
  };

  // сЃљсЃфсЃЄсЃ╝сѓисЃДсЃ│
  const isValid = name?.trim();

  return (
    <BaseDialog
      isOpen={isOpen}
      onClose={onClose}
      title={isEditing ? 'У▓исЂёуЅЕсЃфсѓ╣сЃѕсѓбсѓцсЃєсЃауиежЏє' : 'Тќ░сЂЌсЂёсѓбсѓцсЃєсЃасѓњУ┐йтіа'}
      icon="­ЪЏњ"
      onSave={handleSave}
      saveText={isEditing ? 'ТЏ┤Тќ░' : 'У┐йтіа'}
      onDelete={isEditing ? handleDelete : undefined}
      showDelete={isEditing}
      disabled={!isValid || isLoading}
    >
      <div className="space-y-4">
        {/* сѓбсѓцсЃєсЃатљЇтЁЦтіЏ */}
        <div>
          <label htmlFor="itemName" className="block text-sm font-medium text-gray-700 mb-1">
            сѓбсѓцсЃєсЃатљЇ <span className="text-red-500">*</span>
          </label>
          <input
            id="itemName"
            type="text"
            value={name}
            onChange={(e) => setName(e.target.value)}
            className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            placeholder="СЙІ: сЂФсѓЊсЂўсѓЊсђЂуЅЏС╣│сђЂсЃЉсЃ│"
            disabled={isLoading}
          />
        </div>

        {/* ТЋ░жЄЈтЁЦтіЏ */}
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">
            ТЋ░жЄЈ <span className="text-gray-500">(С╗╗ТёЈ)</span>
          </label>
          <QuantityInput
            value={quantity}
            onChange={setQuantity}
            className="w-full"
            disabled={isLoading}
          />
        </div>
      </div>
    </BaseDialog>
  );
};